import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument } from 'mongoose';

export type PaymentDocument = HydratedDocument<Payment>;

@Schema()
// Schema for payments intended to simplify the payment intent flow into two
// steps: create a payment intent and then confirm the payment intent.
export class Payment {
  @Prop({
    required: true,
    index: true,
  })
  // The id of the related stripe payment intent. This is id is used to for
  // retrieval and reference of payment documents.
  payment_intent_id: string;

  @Prop({
    required: true,
  })
  // The amount of the payment in cents.
  amount: number;

  @Prop({
    required: true,
  })
  // The currency of the payment. See https://stripe.com/docs/currencies for
  // a list of supported currencies.
  currency: string;

  @Prop({
    required: true,
  })
  // An idempotency key used to prevent duplicate payments. This should be
  // generated by the client and using https://github.com/paralleldrive/cuid.
  // All requests for a payment should use the same cuid.
  cuid: string;

  @Prop({
    required: true,
  })
  // The id of the related stripe customer.
  customer_id: string;

  @Prop({
    required: true,
  })
  // The id of the related payment api user.
  user_id: string;

  @Prop({
    required: true,
  })
  // The status of the underlying stripe payment intent. See
  // https://stripe.com/docs/api/payment_intents/object#payment_intent_object-status
  // for a list of possible values.
  status: string;

  @Prop()
  // The id of the related stripe payment method. The payment method is added
  // when the payment intent is confirmed.
  payment_method_id: string;
}

export const PaymentSchema = SchemaFactory.createForClass(Payment);
